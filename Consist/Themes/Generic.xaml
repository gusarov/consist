<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:view="clr-namespace:Consist.View">

	<!--Converter for Indentation of items-->
	<view:IndentConverter x:Key="IndentConverter"/>

	<!--Control Template for TreeViewItem's.-->
	<ControlTemplate TargetType="TreeViewItem" x:Key="TreeListViewItem">
		<!--Grid containing the current information and the subnodes.-->
		<StackPanel>
			<!--Border wrapping the content presenter.-->
			<Border x:Name="Border">
				<!--GridViewRowPresenter containing the current information.-->
				<GridViewRowPresenter Content="{TemplateBinding Header}"
                    Columns="{Binding Columns, 
                    RelativeSource={RelativeSource Mode=FindAncestor, 
                    AncestorType=view:TreeListView}}"/>
			</Border>
			<!--ItemsPresenter containing the subnodes-->
			<ItemsPresenter x:Name="ItemsPresenter" Visibility="Collapsed"/>
		</StackPanel>
		<ControlTemplate.Triggers>
			<!--Trigger used to show the sub items-->
			<DataTrigger Binding="{Binding IsExpanded}" Value="True">
				<Setter TargetName="ItemsPresenter" Property="Visibility" Value="Visible"/>
			</DataTrigger>
			<!--Trigger used to change the color based on selection-->
			<Trigger Property="IsSelected" Value="true">
				<!--Change the background color-->
				<Setter TargetName="Border" Property="Background"
                    Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
				<!--Change the foreground color-->
				<Setter Property="Foreground" 
                    Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"/>
			</Trigger>
			<!--Trigger used to change the color based on selection-->
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsSelected" Value="true"/>
					<Condition Property="IsSelectionActive" Value="false"/>
				</MultiTrigger.Conditions>
				<!--Change the background color-->
				<Setter TargetName="Border" Property="Background"
                    Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"/>
				<!--Change the foreground color-->
				<Setter Property="Foreground" 
                    Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
			</MultiTrigger>
			<!--Trigger used to change the color based on the status of the item-->
			<Trigger Property="IsEnabled" Value="false">
				<!--Change the foreground color-->
				<Setter Property="Foreground" 
                    Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
			</Trigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>

	<!--Control Template for TreeListViewExpander's.-->
	<ControlTemplate TargetType="{x:Type view:TreeListViewExpander}" x:Key="TreeListViewExpander">
		<StackPanel Orientation="Horizontal" x:Name="ContainerElement">
			<!--Use a FrameworkElement to indent the button-->
			<FrameworkElement Width="{Binding RelativeSource={x:Static RelativeSource.Self}, Converter={StaticResource IndentConverter}}"/>
			<!--Use a standard toggle button-->
			<ToggleButton IsChecked="{Binding IsExpanded}" Width="16" Height="16" VerticalAlignment="Center" Margin="1">

			</ToggleButton>
			<!--
			<ToggleButton IsChecked="{Binding IsExpanded}" Width="9" Height="9" VerticalAlignment="Center" Margin="1"/>
			-->
		</StackPanel>
		<ControlTemplate.Triggers>
			<!--Trigger used to show/hide the expand button-->
			<DataTrigger Binding="{Binding HasItems, RelativeSource={RelativeSource Mode=FindAncestor,
                AncestorType=TreeViewItem}}" Value="False">
				<Setter TargetName="ContainerElement" Property="Visibility" Value="Hidden"/>
			</DataTrigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>

	<!--Apply this style to all controls of type 'TreeListView'.-->
	<Style TargetType="{x:Type view:TreeListView}">
		<!--Set the control template.-->
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type view:TreeListView}">
					<ControlTemplate.Resources>
						<!--Apply this style to all 'TreeViewItem's.-->
						<Style TargetType="TreeViewItem">
							<Setter Property="Template" Value="{StaticResource TreeListViewItem}"/>
						</Style>
						<!--Apply this style to all 'TreeListViewExpander's.-->
						<Style TargetType="view:TreeListViewExpander">
							<Setter Property="Template" Value="{StaticResource TreeListViewExpander}"/>
						</Style>
					</ControlTemplate.Resources>
					<!--Create a standard border around the 'TreeListView'.-->
					<Border Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}">
						<!--ScrollViewer providing horizontal scrolling functionality 
                        for both, content and headers.-->
						<ScrollViewer HorizontalScrollBarVisibility="Auto"
                                      VerticalScrollBarVisibility="Disabled">
							<!--Grid containing the header row and all the content rows.-->
							<Grid>
								<Grid.RowDefinitions>
									<!--The header row.-->
									<RowDefinition Height="Auto"/>
									<!--The content row.-->
									<RowDefinition Height="*"/>
								</Grid.RowDefinitions>
								<!--The header row.-->
								<GridViewHeaderRowPresenter Columns="{TemplateBinding Columns}"
                                    AllowsColumnReorder="{TemplateBinding AllowsColumnReorder}"/>
								<!--ScrollViewer providing vertical scrolling
                                functionality for the content.-->
								<ScrollViewer HorizontalScrollBarVisibility="Disabled"
                                              VerticalScrollBarVisibility="Auto"
                                              Grid.Row="1">
									<!--ItemsPresenter containg the content.-->
									<ItemsPresenter/>
								</ScrollViewer>
							</Grid>
						</ScrollViewer>
					</Border>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
</ResourceDictionary>
